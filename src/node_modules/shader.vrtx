#include <common>
 
uniform vec3 iResolution;
uniform float iTime;
uniform vec4 iMouse;

float getRandom(vec2 n) {
    return fract(sin(cos(dot(n, vec2(12.9898,12.1414)))) * 83758.5453);
}

float noise(vec2 n) {
    const vec2 d = vec2(0.0, 1.0);
    vec2 b = floor(n), f = smoothstep(vec2(0.0), vec2(1.0), fract(n));
    return mix(mix(getRandom(b), getRandom(b + d.yx), f.x), mix(getRandom(b + d.xy), getRandom(b + d.yy), f.x), f.y);
}

float fbm(vec2 n) {
    float total = 0.0, amplitude = 1.0;
    for (int i = 0; i <5; i++) {
        total += noise(n) * amplitude;
        n += n*1.7;
        amplitude *= 0.47;
    }
    return total;
}

void mainImage( out vec4 fragColor, vec2 fragCoord ) {

    const vec3 c1 = vec3(0.0, 0.0, 0.1);
    const vec3 c2 = vec3(0.0, 0.0, 0.1);
    const vec3 c3 = vec3(0.0, 0.0, 0.1);
    const vec3 c4 = vec3(0.0, 0.0, 0.1);
    const vec3 c5 = vec3(0.0, 0.0, 0.1);
    const vec3 c6 = vec3(0.0, 0.0, 0.1);

    vec2 speed = vec2(0.1, 0.3);
    float shift = 5.327+sin(iMouse.x / 2.0 * 2.0)/2.4;
    float alpha = 0.3;
    
	float dist = 3.5-sin(iMouse.x*0.4)/1.89;
    
    vec2 uv = fragCoord.xy / iResolution.xy / 2.0;
    vec2 p = fragCoord.xy * dist / iResolution.xx;
    p += sin(p.yx*4.0+vec2(.2,-.3)*iMouse.x)*0.04;
    p += sin(p.yx*8.0+vec2(.6,+.1)*iMouse.x)*0.01;
    
    p.x -= iMouse.x/1.1;
    float q = fbm(p - iMouse.y * 0.3+1.0*sin(iMouse.x+0.5 + iTime / 10.0 )/2.0);
    float qb = fbm(p - iMouse.y * 0.4+0.1*cos(iMouse.x + iTime / 10.0 )/2.0);
    float q2 = fbm(p - iMouse.y * 0.44 - 5.0*cos(iMouse.x + iTime / 10.0 )/2.0) - 6.0;
    float q3 = fbm(p - iMouse.y * 0.9 - 10.0*cos(iMouse.x + iTime / 10.0 )/15.0)-4.0;
    float q4 = fbm(p - iMouse.y * 1.4 - 20.0*sin(iMouse.x + iTime / 10.0 )/14.0)+2.0;
    q = (q + qb - .4 * q2 -2.0*q3  + .6*q4)/3.8;
    vec2 r = vec2(fbm(p + q /2.0 + iMouse.x * speed.x - p.x - p.y), fbm(p + q - (iMouse.x  + iTime / 10.0 ) * speed.y));
    vec3 c = mix(c1, c2, fbm(p + r));
    vec3 color = vec3(1.0/(pow(c+1.61,vec3(4.0))) * cos(shift * fragCoord.y / iResolution.y));
    
    color=vec3(0.2,.2,.45)/(pow((r.y+r.y)* max(.0,p.y)+0.1, 4.0));;
    color += (pow((r.y+r.y)*.65,5.0)+0.055)*mix( vec3(.7,.0,.3),vec3(.4,.5,.0), uv.y);
    color = color/(1.0+max(vec3(0),color));
    fragColor = vec4(color.x, color.y, color.z, alpha);
}

void main() {
  mainImage(gl_FragColor, gl_FragCoord.xy);
}